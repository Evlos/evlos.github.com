<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Evlos.blog()</title>
    <link>/posts/</link>
    <description>Recent content in Posts on Evlos.blog()</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 29 Jan 2020 02:15:35 +0800</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Unheard (本体 / DLC 1 / 2 / 3) 剧情解析</title>
      <link>/posts/unheard/</link>
      <pubDate>Wed, 29 Jan 2020 02:15:35 +0800</pubDate>
      
      <guid>/posts/unheard/</guid>
      <description>剧透警告
双胞胎  是李仲文藏到了李伯文的车里  空画框 谁最后拿到了真画  秘书的画肯定是假的，麦克和黄毛都有画，后来麦克把画藏到了黄毛的包里，黄毛的包被保安拦截下了，所以是保安  谁最早拿到了真画  在场景开始的时候麦克就已经被刘总派来偷到了一幅画，且麦克说自己拿假画替换了真画 后来黄毛才偷了画，所以真画在麦克身上  陷阱 这里的陷阱是麦克一直不确定自己身上拿的是不是真画，一开始他以为自己身上是真画，然后刘总被秘书骗了，以为麦克身上的是假画，刘总告诉麦克之后，麦克就信了，就把画塞给了黄毛
乌鸦 谁带进了炸弹  瘸子醒来觉得自己的腿很重，且瘸子是第一个出现在酒店的  谁引爆了炸弹  耗子，最后一个电话是耗子打的  谁是乌鸦  白德培最早在酒店附近转悠，且耗子最后打电话的手机是白德培的  剧院 谁是小雪之死的主谋  莎莎跟老黄对话的时候自己承认了  谁跟随幽灵短信的指示完成了复仇  莎莎是跟着标记走到房子底下的，正常的情况下标记应该不在房子底下 标记是彭导放到房子底下的  谁发的幽灵短信  眼镜把手机放到操作室里，让彭导听到了莎莎和老黄的对话 彭导听到对话的时候来电人是小雪 眼镜后来又去操作室里取回了手机  精神病院 谁不是精神病  老顾说记者不是精神病 韩警官 + 小蓝 + 麦爷是来抓老鬼的 先排除医生 演员 + 詹叔两个人是来找老鬼的，还发现了遥控器的事情 记者说自己不是精神病（暂且相信）  谁是精神病  导演 + 小偷  导演告诉小偷这里不是精神病院，而是一个大型的真人秀现场   画家  在医生治疗的时候产生了幻觉   富二代  人格分裂   小雪  全程自闭    谁不是老鬼  爆炸现场的人：演员 + 詹叔，小雪 + 小偷，麦爷 + 韩警官 + 小蓝 来找老鬼的人：演员 + 詹叔，麦爷 + 韩警官 + 小蓝 爆炸时候无法行动的人Draft：画家 + 王医生  谁是老鬼  老顾醒来的时候发现有东西不见了（应该是遥控器）  致命剧本 线索  龙哥安排大坤（司机）和小靓去交易，每人拿了一块芯片 小靓（阿May）联系第三方，让龙哥直接跟老板交易，让老板直接抢芯片，把钱对半分 义明为老板工作（义明可能演的是阿虎） 叉烧喜欢撸铁 阿虎的弟弟&amp;mdash; 傻标跟阿虎知道他们是来演戏的且听了很多剧本，傻标到储物柜里把安楠的仿真枪拿走了，傻标为老板工作 阿May（不是灰仔 / 叉烧）认识傻标，阿May是龙哥的手下（小靓可能演的是阿May），阿May毒死了傻标 阿May和傻标在山上等阿虎，傻标开车下山，然后坐警车回来（阿May知道是灰仔开的车） 阿虎和阿May把灰仔干掉了，阿May拿到了两块芯片，阿虎为老板工作 灰仔的其中一块芯片是从叉烧身上拿到的，灰仔自己也有一块 婷姐认为剧本是真的  谁饰演了谁  大坤（在山顶等交易）-&amp;gt; 傻标（开车下山把女警撞死了） 小靓 -&amp;gt; 阿May 小刘（在车里戴头套，交易前）-&amp;gt; 灰仔？ 安楠（和小刘在同一辆车里）-&amp;gt; 叉烧（大坤说这人有一身肌肉） 义明 -&amp;gt; 阿虎？ 邓伯 -&amp;gt; 老板 丽莎 -&amp;gt; 婷姐？ 托尼 -&amp;gt; 大D？  交易当天起，拿到过两块芯片的人依次是 线索  灰仔和叉烧在山腰的车里等着 阿May和傻标在山上准备卖货，傻标听说灰仔被女警拦住了，就开车下山撞死了女警 灰仔开警车送傻标回山上，叉烧去水库把女警尸体丢了 阿虎劫走了货，跟阿豹开车去山下 灰仔开车把他们撞了，阿豹死了，灰仔劫走了货 风衣男想劫走灰仔的货（水库），风衣男说螳螂捕禅黄鹊在后（穿风衣，戴头套），灰仔开枪打了他一条腿 叉烧说风衣男拿枪指着灰仔的时候是他跳出来（说：我才是黄鹊）救了场，风衣男跑了 风衣男可能是大 D，是婷姐让大 D 去劫老板的货（将在山顶交易的） 导演的妹妹死了，尸体是在水库里发现的，所以女警是导演的妹妹  结论  阿May 1 傻标 1 傻标 1 -&amp;gt; 阿May 2 阿May 2 -&amp;gt; 阿虎 2 阿虎 2 -&amp;gt; 灰仔 1 叉烧 1 叉烧 1 -&amp;gt; 灰仔 2 灰仔 2 -&amp;gt; 阿May 2（芯片是从灰仔身上搜出来的）  经手过真枪的人依次是  副导：说自己给了安楠枪，忘记给阿虎枪了 安楠 叉烧：开了两次柜子，第二次开的应该不是自己的柜子（到安楠的柜子里拿了枪） 安楠：在地下捡到了灰仔威胁叉烧丢掉的枪  中元节特别篇 线索  时间有问题 / 反过来 / 这家人是怎么死的 / 这家人的阴谋 煤气是谁开的 / 是阿怪邀请大家来玩的 / 火灾现场死了 8 个，卧室 1，客厅 5，厨房 1，客厅的柜子里 1 照片上有 8 个人，一个老人 (可能不在火灾现场)，两对夫妇，一个男人 监狱警察 医生 蹲监狱的 护士 导游 中学生 大学生 泰国卖佛像 26:10 阿盐和寅老大想把冬冬的日记拿给别人看 28:13 67和十三姨在门廊上拿了请假报告 (监狱请假报告，同行郑海)，想给茄茄看，说茄茄是最无辜的，被她们牵连了 1999 年 8 月 15 日，根本没人记得  角色 当年这些人是谁  冬冬爷爷 (中 1 的房间，空气里有药味，屋中信里写道: 我知道事情的真相了，你们不用来找我) (全家福: 一个老人(可能不在火灾现场)) (咽喉癌) 刘贵年 抽烟斗 冬冬爸爸 泰国卖佛像 (晚上和姐姐吃饭) 刘文 冬冬妈妈 梁美丽 冬冬姑姑 (刘静(护工，负责照顾老人的吃饭睡觉吃药) 护士?</description>
    </item>
    
    <item>
      <title>SwiftUI Note</title>
      <link>/posts/swiftui-note/</link>
      <pubDate>Fri, 03 Jan 2020 15:02:43 +0800</pubDate>
      
      <guid>/posts/swiftui-note/</guid>
      <description>Icon Image(systemName: &amp;quot;star.fill&amp;quot;).imageScale(.medium).foregroundColor(.yellow) Bool bool.toggle() Binding @State private var isPlaying: Bool = false PlayButton(isPlaying: $isPlaying) struct PlayButton : View { @Binding var isPlaying: Bool OnReceive .onReceive(PodcastPlayer.currentTimePublisher) { newCurrentTime in self.currentTime = newCurrentTime } Weak DispatchQueue.main.async { [weak self] in DispatchQueue.global(qos: .background).async { [weak self] in guard let strongSelf = self else { return } weak var owner: Person? https://www.appcoda.com/memory-management-swift/
Product &amp;gt; Profile &amp;gt; Leaks
UI Tweaking .padding([.leading, .trailing]) .font(.caption) HStack { Text(&amp;quot;Delicious&amp;quot;) Image(&amp;quot;20x20_avocado&amp;quot;) Text(&amp;quot;Avocado Toast&amp;quot;).</description>
    </item>
    
    <item>
      <title>Leetcode Part 4</title>
      <link>/posts/leetcode_part_4/</link>
      <pubDate>Wed, 25 Dec 2019 18:13:42 +0800</pubDate>
      
      <guid>/posts/leetcode_part_4/</guid>
      <description>The Operators:
x &amp;laquo; y
Returns x with the bits shifted to the left by y places (and new bits on the right-hand-side are zeros). This is the same as multiplying x by 2**y.
x &amp;raquo; y
Returns x with the bits shifted to the right by y places. This is the same as //&amp;lsquo;ing x by 2**y.
x &amp;amp; y
Does a &amp;ldquo;bitwise and&amp;rdquo;. Each bit of the output is 1 if the corresponding bit of x AND of y is 1, otherwise it&amp;rsquo;s 0.</description>
    </item>
    
    <item>
      <title>Leetcode Part 3</title>
      <link>/posts/leetcode_part_3/</link>
      <pubDate>Fri, 01 Mar 2019 16:54:40 +0800</pubDate>
      
      <guid>/posts/leetcode_part_3/</guid>
      <description>https://leetcode.com/explore/featured/card/top-interview-questions-easy/92/array/646/
Strings Implement strStr() 忘记用 Python 的 [x:y] 来一段段匹配了：
if haystack == needle or not needle: return 0 for i, j in enumerate(haystack): if i &amp;gt; len(haystack) - len(needle) + 1: break if needle and haystack[i] == needle[0]: if i + len(needle) &amp;lt;= len(haystack): notMatch = False for l, m in enumerate(needle): if haystack[i + l] != needle[l]: notMatch = True break if not notMatch: return i return -1  Runtime: 44 ms, faster than 55.</description>
    </item>
    
    <item>
      <title>Leetcode Part 2</title>
      <link>/posts/leetcode_part_2/</link>
      <pubDate>Thu, 25 Oct 2018 19:09:12 +0800</pubDate>
      
      <guid>/posts/leetcode_part_2/</guid>
      <description>https://leetcode.com/explore/featured/card/top-interview-questions-easy/92/array/646/
Strings First Unique Character in a String 暂不做优化，啥时候要炫技吓人再说：
count = {} for i, j in enumerate(s): if j in count: count[j] += 1 else: count[j] = 1 for i, j in enumerate(s): if count[j] == 1: return i return -1 做完之后看到有别人用 set，find 和 rfind 来提高效率，以后可以参考。
Valid Anagram 我这个答案不说效率，应该是最精简的了：
return sorted(s) == sorted(t) 而且效率也不算很低：
 Your runtime beats 31.55 % of python3 submissions.
 顺便提交到了评论区，看看别人的看法：
https://leetcode.com/explore/featured/card/top-interview-questions-easy/127/strings/882/discuss/185617/Python-1-line-(using-only-1-built-in-function)
Valid Palindrome 排除了字母和数字之外的数据之后，就好办了：
j = &#39;&#39; for i in s: if i in &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#39;: j += i.</description>
    </item>
    
    <item>
      <title>Leetcode Part 1</title>
      <link>/posts/leetcode_part_1/</link>
      <pubDate>Wed, 24 Oct 2018 13:47:25 +0800</pubDate>
      
      <guid>/posts/leetcode_part_1/</guid>
      <description>https://leetcode.com/explore/featured/card/top-interview-questions-easy/92/array/646/
Array Rotate Array 刚开始没仔细看题，就写了个 nums[-k:] + nums[:k]，后来发现题目中要求 do it in-place，并且要兼容各种 cases，最终写成
nums[:] = (nums[:-k][::-1] + nums[-k:][::-1])[::-1]  25 / 34 test cases passed.
 卡在了 nums = [1,2]; k = 3，于是加上
k = k % len(nums) 终于 accepted 了
Strings Reverse String 用 Python 写简单
s[::-1] Reverse Integer x = str(x) y = -int(x.replace(&#39;-&#39;, &#39;&#39;)[::-1]) if &#39;-&#39; in x else int(x[::-1]) return y if -1 &amp;lt;&amp;lt; 31 &amp;lt;= y and y &amp;lt;= (1 &amp;lt;&amp;lt; 31) - 1 else 0 这里用 2**31 或者 (1 &amp;laquo; 31) - 1 都行</description>
    </item>
    
    <item>
      <title>Ruby 学习笔记</title>
      <link>/posts/tips-in-ruby/</link>
      <pubDate>Wed, 08 Feb 2017 19:01:22 +0800</pubDate>
      
      <guid>/posts/tips-in-ruby/</guid>
      <description>Class variable class Network def self.get(url, options) @@result = :test_result end end Instance variable class Network def self.get(url, options) @result = :test_result end end Temporary attribute on ApplicationRecord class Tester &amp;lt; ApplicationRecord attr_accessor :name # for read and write end Method nameing def available? end def update! end Class method class User def self.validate! end end class User class &amp;lt;&amp;lt; self def validate! end end end def User.validate! end User.validate! Rewrite class SubAccount &amp;lt; ApplicationRecord attr_reader :password # provide instance variable with getter only def password=(val) self.</description>
    </item>
    
    <item>
      <title>如何在 dva 中使用 sass</title>
      <link>/posts/integrate-sass-with-dva/</link>
      <pubDate>Wed, 26 Oct 2016 17:47:01 +0800</pubDate>
      
      <guid>/posts/integrate-sass-with-dva/</guid>
      <description>安装 sass-loader 和 node-sass 之后，在 webpack.config.js 中
webpackConfig.module.loaders.forEach(function(loader, index) { 之上（其实只要在这个 function 里面都可以），添加以下代码：
webpackConfig.module.loaders.push({ test: /\.module\.sass$/, loader: path.join(path.dirname(require.resolve(&#39;extract-text-webpack-plugin&#39;)), &#39;loader.js&#39;) + &#39;?{&amp;quot;remove&amp;quot;:true}!css?sourceMap&amp;amp;modules&amp;amp;localIdentName=[local]___[hash:base64:5]&amp;amp;-autoprefixer!&#39; + &#39;postcss-loader!&#39;+ &#39;sass-loader?sourceMap&#39; }); 然后在
webpackConfig.module.loaders.forEach(function(loader, index) { 之下添加以下代码即可：
if (typeof loader.test === &#39;function&#39; &amp;amp;&amp;amp; loader.test.toString().indexOf(&#39;\\.sass$&#39;) &amp;gt; -1) { loader.include = /node_modules/; loader.test = /\.sass$/; } if (loader.test.toString() === &#39;/\\.module\\.sass$/&#39;) { loader.exclude = /node_modules/; loader.test = /\.sass$/; } </description>
    </item>
    
    <item>
      <title>如何在 angular2-webpack-starter 中使用 font-awesome</title>
      <link>/posts/integrate-font-awesome-with-angular2-webpack-starter/</link>
      <pubDate>Thu, 23 Jun 2016 15:23:13 +0800</pubDate>
      
      <guid>/posts/integrate-font-awesome-with-angular2-webpack-starter/</guid>
      <description>如果你跟我一样是用 angular2-webpack-starter 作为 Angular2 的脚手架的话，就可能在整合 font-awesome 时遇到问题。
因为此脚手架的设定是用 raw-loader 来载入 CSS：
/* * Raw loader support for *.css files * Returns file content as string * * See: https://github.com/webpack/raw-loader */ { test: /\.css$/, loader: &#39;raw-loader&#39; }, 而 font-awesome 因为资源文件需要导入的原因就要用到 css-loader 和 style-loader，用 raw-loader 就载入不了图标了。
解决方案 首先安装 css-loader 和 style-loader:
cnpm install -D css-loader style-loader 因为 raw-loader 的匹配正则被设置为 \.css$, 所以我们可以把 ? 问号加在行尾来 bypass 此正则，即使用以下代码来载入 font-awesome：
require(&#39;style-loader!css-loader!font-awesome/css/font-awesome.css?&#39;); 然后图标就可以正常显示了：
&amp;lt;i class=&amp;quot;fa fa-floppy-o&amp;quot; aria-hidden=&amp;quot;true&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; </description>
    </item>
    
    <item>
      <title>Raspbian 的国内源配置</title>
      <link>/posts/raspbian-mirror-in-china/</link>
      <pubDate>Mon, 28 Sep 2015 20:01:44 +0800</pubDate>
      
      <guid>/posts/raspbian-mirror-in-china/</guid>
      <description>很多国外的源在国内连接的速度十分感人，所以基本上安装好 RPI 后的第一件事情就是寻找 Raspbian 的国内镜像，然后发现阿里云镜像站就有提供。
但是现在 Raspbian 除了系统的源之外还会用到基金会源，也就是 archive.raspberrypi.org，阿里云镜像站并没有提供这个源，幸好还有中科大的镜像站。
所以只要把 /etc/apt/sources.list 的内容修改为如下即可：
deb http://mirrors.aliyun.com/raspbian/raspbian/ wheezy main contrib non-free rpi deb-src http://mirrors.aliyun.com/raspbian/raspbian/ wheezy main contrib non-free rpi deb http://mirrors.ustc.edu.cn/archive.raspberrypi.org/debian/ wheezy main </description>
    </item>
    
    <item>
      <title>升级 Windows 10 后 Git 因无权限无法 commit</title>
      <link>/posts/dockerfile-of-nodejs-and-ghost/</link>
      <pubDate>Sun, 30 Aug 2015 12:44:13 +0800</pubDate>
      
      <guid>/posts/dockerfile-of-nodejs-and-ghost/</guid>
      <description>我习惯用 Git 来备份 Windows 上面一些软件的配置文件，这两天刚升上 Windows 10，安装了 Github Desktop 之后却发现无法 commit 了，查看错误日志：
2015-08-30 20:37:35.1597|WARN|thread: 1|StandardUserErrors|Showing user error Failed to create a new commit. GitHub.IO.ProcessException: error: Unable to append to .git/logs/refs/heads/master: Permission denied fatal: cannot update HEAD ref 发现 Git 因为权限问题无法提交，当即到属性 - 安全 - 高级选项里面一看，发现所有者是 S-1-5-21 开头的无法识别的用户，看来升级的时候权限并没有自动处理好。这时点开所有者边上的更改，输入当前我们的 Windows 帐号名，可以只输入一部分，点击检查名称后会自动补全，最后点确定。
然后勾选底部的 使用可从此对象继承的权限项目替换所有子对象的权限项目，再点确定，问题即修复，可以正常 commit 啦。</description>
    </item>
    
    <item>
      <title>NodeJS 和 Ghost 的 Dockerfile</title>
      <link>/posts/git-cannot-commit-after-upgrading-to-win10/</link>
      <pubDate>Sun, 30 Aug 2015 04:29:32 +0800</pubDate>
      
      <guid>/posts/git-cannot-commit-after-upgrading-to-win10/</guid>
      <description>虽然在 Docker Hub 看到有标注 OFFICIAL REPOSITORY 的 Dockerfile，但是我还是想自己写一个，因为他们的 Dockerfile 里有一个叫 docker-entrypoint.sh 的文件包含以下内容：
 if [ ! -e &amp;quot;$GHOST_CONTENT/config.js&amp;quot; ]; then sed -r &#39; s/127\.0\.0\.1/0.0.0.0/g; s!path.join\(__dirname, (.)/content!path.join(process.env.GHOST_CONTENT, \1!g; &#39; &amp;quot;$GHOST_SOURCE/config.example.js&amp;quot; &amp;gt; &amp;quot;$GHOST_CONTENT/config.js&amp;quot; fi 这里会把所有 config.js 里的 127.0.0.1 替换为 0.0.0.0 以允许外网访问，却并没有提供数据库的自定义设置。我不想用 SQLite，所以希望能自定义一下 config.js，干脆自己动手。
NodeJS 首先写一个 NodeJS 环境的 Dockerfile，这样下次要用到 NodeJS 我可以直接引用它：
FROM ubuntu:latest MAINTAINER Evlos &amp;lt;4tyle8@gmail.com&amp;gt; ADD sources.list /etc/apt/sources.list RUN apt-get update &amp;amp;&amp;amp; \ apt-get -y upgrade &amp;amp;&amp;amp; \ DEBIAN_FRONTEND=noninteractive apt-get -y install curl &amp;amp;&amp;amp; \ curl --silent --location https://deb.</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>/posts/hello-world/</link>
      <pubDate>Sat, 29 Aug 2015 10:39:20 +0800</pubDate>
      
      <guid>/posts/hello-world/</guid>
      <description>以下内容生成自 Lorem Ipsum，用以抒发我复杂的思想感情：
 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse nulla ante, iaculis et dignissim at, condimentum vitae augue. Donec quis ante vitae orci aliquet aliquam. Nunc ut arcu neque. Fusce non scelerisque augue, at maximus erat. Maecenas quis lorem sed mi ornare molestie. Pellentesque dictum purus cursus dui ornare, nec convallis elit iaculis. Morbi in consectetur orci. Quisque augue massa, convallis vitae ullamcorper non, laoreet at risus.</description>
    </item>
    
    <item>
      <title>成功把 Ajax 提交评论效果添加到 Zbench</title>
      <link>/posts/1966_add-ajax-comment-to-zbench/</link>
      <pubDate>Thu, 22 Jul 2010 02:05:25 +0800</pubDate>
      
      <guid>/posts/1966_add-ajax-comment-to-zbench/</guid>
      <description>以下内容恢复自 Wordpress 时期的数据库备份，内容已经严重过期，仅留作纪念。
 话说我碰巧在 5d6d 子论坛看到个很牛的 Ajax 评论提交效果，显示非常好，与一般提交几乎一样呢。
所以立马开始动手折腾。不过具体折腾内容我只能透露一部分额，不然影响原作者的销售就不好了。
&amp;lt;img src=\&#39;http://www.evlos.org/ev-box/myimg/uploads/Cap0000535.png\&#39; /&amp;gt; 一. 部分 Zbench 的 CSS 修正： 上次的修改还是没有达到我心中的完美样式，所以咱们继续补充，添加 Wp-pagenavi 的 CSS 代码。
.wp-pagenavi .page{padding:0 4px;} .wp-pagenavi .pages{padding-right:5px} .wp-pagenavi .current{padding:0 4px;} .wp-pagenavi .nextpostslink{padding:0 4px;} .wp-pagenavi .larger{} .wp-pagenavi .last{padding:0 5px;} //补上 Wp-pagenavi 插件的 CSS .post .entry img{position:relative;left:-2px;} //文章中图片整体向左偏移 2px #footer-inside #back-to-top{position:absolute;top:5px;right:10px;font-size:12px;border:none;color:#AAA;} //TOP按键向右偏移 20px 二. Ajax 效果预览： 标题下方的图片是进行 AJAX 提交之后的效果图，看起来和无 AJAX 提交的时候的效果几乎一摸一样。 下面则是点击提交按键之后的效果。
&amp;lt;img src=\&#39;http://www.evlos.org/ev-box/myimg/uploads/Cap0000534.png\&#39; /&amp;gt; 三. 添加 Ajax 效果的部分步骤： 我只能透露一部分的修改过程，需要的童鞋请到 &amp;lt;a target=&#39;_blank&#39; rel=&#39;nofollow&#39; href=&#39;http://zww.</description>
    </item>
    
    <item>
      <title>Wordpress 的 Linux VPS 时间校正</title>
      <link>/posts/1957_correct-the-time-of-linux_vps/</link>
      <pubDate>Thu, 08 Jul 2010 22:36:20 +0800</pubDate>
      
      <guid>/posts/1957_correct-the-time-of-linux_vps/</guid>
      <description>以下内容恢复自 Wordpress 时期的数据库备份，内容已经严重过期，仅留作纪念。
 这篇文章主要通过修改 Wordpress 函数来修正时间，以及一部分 Linux 服务器常用命令说明。
&amp;lt;img src=\&#39;http://www.evlos.org/ev-box/myimg/uploads/Cap0000419.png\&#39; /&amp;gt; 一. Wordpress 的 Linux VPS 时间校正： 在 WP 后台设置显示的是 “UTC 时间是2010-07-07 8:03:59 本地时间为 2010-07-08 4:03:59”。
而实际上现在我的电脑上的时间现在是 2010-07-07 20:03:59。
-bash-3.2# date // \&amp;quot;-bash-3.2#\&amp;quot; 是命令提示，就像 Win 下面的 \&amp;quot;C:\\Documents and Settings\\Administrator&amp;gt;\&amp;quot; 一样 // date 是显示当前服务器时间的函数 Thu Jul 8 04:03:59 CST 2010 而且在 Wordpress 的后台选择的时区是上海，这个是没有错的。但是在数据库里面乱套了。
数据库里的 GMT 时间却是北京时间，正常时间却是美国时间，然后经过设置纠正，就诡异了。
function get_comment_time( $d = \&#39;\&#39;, $gmt = false, $translate = true ) { global $comment; $comment_date = $gmt ?</description>
    </item>
    
    <item>
      <title>Gregarius 0.6.1 的错误函数修正</title>
      <link>/posts/1261_fix-the-function-of-gregarius-061/</link>
      <pubDate>Thu, 03 Dec 2009 00:47:09 +0800</pubDate>
      
      <guid>/posts/1261_fix-the-function-of-gregarius-061/</guid>
      <description>以下内容恢复自 Wordpress 时期的数据库备份，内容已经严重过期，仅留作纪念。
 最近在研究 RSS 聚合程序，个人觉得相对最好的程序是 Gregarius，效率高、负载低、口碑不错。
由于此程序的最后更新时间是 2008-11-26，那就要考虑到新版本PHP不支持函数的问题。
&amp;lt;img src=\&amp;quot;http://www.evlos.org/ev-box/myimg/uploads/Capture0524.jpg\&amp;quot; /&amp;gt; 像上图一样，此函数在 PHP 5.3.0 中会被屏蔽，在 PHP 6.0.0 里会被删除掉，同时可被替代。
因为 PHP 团队将删除支持 Portable Operating System Interface (POSIX) 正则表达式的扩展。
1. Eregi 函数的语法： int eregi(string pattern,string string [,array regs]); 2. Eregi 函数的解释： 搜寻 string 来和 pattern 的正规表示比对。
若找到比对则会呼叫第三个参数 regs，比对的结果会储存在 regs 的元素之中。
$regs[1] 为符合第一个左边括弧 (parenthesis) 的部份字符串，$regs[2] 为符合第二个括弧的部份字符串。
以此类推，$regs[0] 为参数 string。
如果 ereg() 找到比对，则 $regs 会被十个元素来填满，即使是多于或少于十个括弧内的部份字符串。
也可以比对，这将不影响 ereg() 去比对更多部份字符串的能力。如果比对不到，$regs 将不会被 ereg() 改变。
搜寻是不区分大小写的。</description>
    </item>
    
    <item>
      <title>使用本地 DNS 缓存加速上网</title>
      <link>/posts/1292_use-local-dns-cache-to-speed-up/</link>
      <pubDate>Wed, 02 Dec 2009 14:36:36 +0800</pubDate>
      
      <guid>/posts/1292_use-local-dns-cache-to-speed-up/</guid>
      <description>以下内容恢复自 Wordpress 时期的数据库备份，内容已经严重过期，仅留作纪念。
 一般来说查询一次 DNS 需要 20-120ms 的时间，查询几次看起来不多，但是累积起来就大了。
图上是我 24 小时进行查询的网址数，大概 2893 条。
&amp;lt;img src=\&amp;quot;http://www.evlos.org/ev-box/myimg/uploads/Capture0562.jpg\&amp;quot; /&amp;gt; 1. 使用说明： 下载并运行 Dnsspeeder 即可，他会自动把你的 DNS 服务器设置为 127.0.0.1 的本地地址。
左上角的下拉菜单是缓存时间，默认是一个小时，不过我是设置成了 24 小时，效果可能更明显一点。
左下角的表示启动时自动隐藏在系统托盘，这样需要开机启动只要勾选并拉到开始菜单的启动项里就好了。
缓存 24 小时的弊端是某些网站使用了动态的 IP ，这样会是它们无法被访问。
要稍等一下，然后软件图标会变红并自动刷新缓存，再访问就没有问题了。</description>
    </item>
    
    <item>
      <title>博客架设完成</title>
      <link>/posts/1_init/</link>
      <pubDate>Sat, 03 Oct 2009 00:40:50 +0800</pubDate>
      
      <guid>/posts/1_init/</guid>
      <description>以下内容恢复自 Wordpress 时期的数据库备份，内容已经严重过期，仅留作纪念。
 以前是 toblog.net
但是因为 ASP 和 Boblog 的原因关闭了
域名也送给我的一个老师
这个可以说是它的延续
2009.10：
 正式开放
 2009.9：
 Evlos.org
  Host by Gegehost
 </description>
    </item>
    
  </channel>
</rss>
