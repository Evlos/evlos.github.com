<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>[[Evlos]]</title>
    <link>/</link>
    <description>Recent content on [[Evlos]]</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 25 Dec 2019 18:13:42 +0800</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Leetcode Part 4</title>
      <link>/posts/leetcode_part_4/</link>
      <pubDate>Wed, 25 Dec 2019 18:13:42 +0800</pubDate>
      
      <guid>/posts/leetcode_part_4/</guid>
      <description>The Operators:
x &amp;lt;&amp;lt; y
Returns x with the bits shifted to the left by y places (and new bits on the right-hand-side are zeros). This is the same as multiplying x by 2**y.
x &amp;gt;&amp;gt; y
Returns x with the bits shifted to the right by y places. This is the same as //&amp;lsquo;ing x by 2**y.
x &amp;amp; y
Does a &amp;ldquo;bitwise and&amp;rdquo;. Each bit of the output is 1 if the corresponding bit of x AND of y is 1, otherwise it&amp;rsquo;s 0.</description>
    </item>
    
    <item>
      <title>Leetcode Part 3</title>
      <link>/posts/leetcode_part_3/</link>
      <pubDate>Fri, 01 Mar 2019 16:54:40 +0800</pubDate>
      
      <guid>/posts/leetcode_part_3/</guid>
      <description>https://leetcode.com/explore/featured/card/top-interview-questions-easy/92/array/646/
Strings Implement strStr() 忘记用 Python 的 [x:y] 来一段段匹配了：
if haystack == needle or not needle: return 0 for i, j in enumerate(haystack): if i &amp;gt; len(haystack) - len(needle) + 1: break if needle and haystack[i] == needle[0]: if i + len(needle) &amp;lt;= len(haystack): notMatch = False for l, m in enumerate(needle): if haystack[i + l] != needle[l]: notMatch = True break if not notMatch: return i return -1   Runtime: 44 ms, faster than 55.</description>
    </item>
    
    <item>
      <title>Leetcode Part 2</title>
      <link>/posts/leetcode_part_2/</link>
      <pubDate>Thu, 25 Oct 2018 19:09:12 +0800</pubDate>
      
      <guid>/posts/leetcode_part_2/</guid>
      <description>https://leetcode.com/explore/featured/card/top-interview-questions-easy/92/array/646/
Strings First Unique Character in a String 暂不做优化，啥时候要炫技吓人再说：
count = {} for i, j in enumerate(s): if j in count: count[j] += 1 else: count[j] = 1 for i, j in enumerate(s): if count[j] == 1: return i return -1  做完之后看到有别人用 set，find 和 rfind 来提高效率，以后可以参考。
Valid Anagram 我这个答案不说效率，应该是最精简的了：
return sorted(s) == sorted(t)  而且效率也不算很低：
 Your runtime beats 31.55 % of python3 submissions.
 顺便提交到了评论区，看看别人的看法：
https://leetcode.com/explore/featured/card/top-interview-questions-easy/127/strings/882/discuss/185617/Python-1-line-(using-only-1-built-in-function)
Valid Palindrome 排除了字母和数字之外的数据之后，就好办了：</description>
    </item>
    
    <item>
      <title>Leetcode Part 1</title>
      <link>/posts/leetcode_part_1/</link>
      <pubDate>Wed, 24 Oct 2018 13:47:25 +0800</pubDate>
      
      <guid>/posts/leetcode_part_1/</guid>
      <description>https://leetcode.com/explore/featured/card/top-interview-questions-easy/92/array/646/
Array Rotate Array 刚开始没仔细看题，就写了个 nums[-k:] + nums[:k]，后来发现题目中要求 do it in-place，并且要兼容各种 cases，最终写成
nums[:] = (nums[:-k][::-1] + nums[-k:][::-1])[::-1]   25 / 34 test cases passed.
 卡在了 nums = [1,2]; k = 3，于是加上
k = k % len(nums)  终于 accepted 了
Strings Reverse String 用 Python 写简单
s[::-1]  Reverse Integer x = str(x) y = -int(x.replace(&#39;-&#39;, &#39;&#39;)[::-1]) if &#39;-&#39; in x else int(x[::-1]) return y if -1 &amp;lt;&amp;lt; 31 &amp;lt;= y and y &amp;lt;= (1 &amp;lt;&amp;lt; 31) - 1 else 0  这里用 2**31 或者 (1 &amp;lt;&amp;lt; 31) - 1 都行</description>
    </item>
    
    <item>
      <title>Ruby 学习笔记</title>
      <link>/posts/tips-in-ruby/</link>
      <pubDate>Wed, 08 Feb 2017 19:01:22 +0800</pubDate>
      
      <guid>/posts/tips-in-ruby/</guid>
      <description>Class variable class Network def self.get(url, options) @@result = :test_result end end  Instance variable class Network def self.get(url, options) @result = :test_result end end  Temporary attribute on ApplicationRecord class Tester &amp;lt; ApplicationRecord attr_accessor :name # for read and write end  Method nameing def available? end def update! end  Class method class User def self.validate! end end class User class &amp;lt;&amp;lt; self def validate! end end end def User.</description>
    </item>
    
    <item>
      <title>如何在 dva 中使用 sass</title>
      <link>/posts/integrate-sass-with-dva/</link>
      <pubDate>Wed, 26 Oct 2016 17:47:01 +0800</pubDate>
      
      <guid>/posts/integrate-sass-with-dva/</guid>
      <description>安装 sass-loader 和 node-sass 之后，在 webpack.config.js 中
webpackConfig.module.loaders.forEach(function(loader, index) {  之上（其实只要在这个 function 里面都可以），添加以下代码：
webpackConfig.module.loaders.push({ test: /\.module\.sass$/, loader: path.join(path.dirname(require.resolve(&#39;extract-text-webpack-plugin&#39;)), &#39;loader.js&#39;) + &#39;?{&amp;quot;remove&amp;quot;:true}!css?sourceMap&amp;amp;modules&amp;amp;localIdentName=[local]___[hash:base64:5]&amp;amp;-autoprefixer!&#39; + &#39;postcss-loader!&#39;+ &#39;sass-loader?sourceMap&#39; });  然后在
webpackConfig.module.loaders.forEach(function(loader, index) {  之下添加以下代码即可：
if (typeof loader.test === &#39;function&#39; &amp;amp;&amp;amp; loader.test.toString().indexOf(&#39;\\.sass$&#39;) &amp;gt; -1) { loader.include = /node_modules/; loader.test = /\.sass$/; } if (loader.test.toString() === &#39;/\\.module\\.sass$/&#39;) { loader.exclude = /node_modules/; loader.test = /\.sass$/; }  </description>
    </item>
    
    <item>
      <title>如何在 angular2-webpack-starter 中使用 font-awesome</title>
      <link>/posts/integrate-font-awesome-with-angular2-webpack-starter/</link>
      <pubDate>Thu, 23 Jun 2016 15:23:13 +0800</pubDate>
      
      <guid>/posts/integrate-font-awesome-with-angular2-webpack-starter/</guid>
      <description>如果你跟我一样是用 angular2-webpack-starter 作为 Angular2 的脚手架的话，就可能在整合 font-awesome 时遇到问题。
因为此脚手架的设定是用 raw-loader 来载入 CSS：
/* * Raw loader support for *.css files * Returns file content as string * * See: https://github.com/webpack/raw-loader */ { test: /\.css$/, loader: &#39;raw-loader&#39; },  而 font-awesome 因为资源文件需要导入的原因就要用到 css-loader 和 style-loader，用 raw-loader 就载入不了图标了。
解决方案 首先安装 css-loader 和 style-loader:
cnpm install -D css-loader style-loader  因为 raw-loader 的匹配正则被设置为 \.css$, 所以我们可以把 ? 问号加在行尾来 bypass 此正则，即使用以下代码来载入 font-awesome：
require(&#39;style-loader!css-loader!font-awesome/css/font-awesome.css?&#39;);  然后图标就可以正常显示了：</description>
    </item>
    
    <item>
      <title>Raspbian 的国内源配置</title>
      <link>/posts/raspbian-mirror-in-china/</link>
      <pubDate>Mon, 28 Sep 2015 20:01:44 +0800</pubDate>
      
      <guid>/posts/raspbian-mirror-in-china/</guid>
      <description>很多国外的源在国内连接的速度十分感人，所以基本上安装好 RPI 后的第一件事情就是寻找 Raspbian 的国内镜像，然后发现阿里云镜像站就有提供。
但是现在 Raspbian 除了系统的源之外还会用到基金会源，也就是 archive.raspberrypi.org，阿里云镜像站并没有提供这个源，幸好还有中科大的镜像站。
所以只要把 /etc/apt/sources.list 的内容修改为如下即可：
deb http://mirrors.aliyun.com/raspbian/raspbian/ wheezy main contrib non-free rpi deb-src http://mirrors.aliyun.com/raspbian/raspbian/ wheezy main contrib non-free rpi deb http://mirrors.ustc.edu.cn/archive.raspberrypi.org/debian/ wheezy main  </description>
    </item>
    
    <item>
      <title>升级 Windows 10 后 Git 因无权限无法 commit</title>
      <link>/posts/dockerfile-of-nodejs-and-ghost/</link>
      <pubDate>Sun, 30 Aug 2015 12:44:13 +0800</pubDate>
      
      <guid>/posts/dockerfile-of-nodejs-and-ghost/</guid>
      <description>我习惯用 Git 来备份 Windows 上面一些软件的配置文件，这两天刚升上 Windows 10，安装了 Github Desktop 之后却发现无法 commit 了，查看错误日志：
2015-08-30 20:37:35.1597|WARN|thread: 1|StandardUserErrors|Showing user error Failed to create a new commit. GitHub.IO.ProcessException: error: Unable to append to .git/logs/refs/heads/master: Permission denied fatal: cannot update HEAD ref  发现 Git 因为权限问题无法提交，当即到属性 - 安全 - 高级选项里面一看，发现所有者是 S-1-5-21 开头的无法识别的用户，看来升级的时候权限并没有自动处理好。这时点开所有者边上的更改，输入当前我们的 Windows 帐号名，可以只输入一部分，点击检查名称后会自动补全，最后点确定。
然后勾选底部的 使用可从此对象继承的权限项目替换所有子对象的权限项目，再点确定，问题即修复，可以正常 commit 啦。</description>
    </item>
    
    <item>
      <title>NodeJS 和 Ghost 的 Dockerfile</title>
      <link>/posts/git-cannot-commit-after-upgrading-to-win10/</link>
      <pubDate>Sun, 30 Aug 2015 04:29:32 +0800</pubDate>
      
      <guid>/posts/git-cannot-commit-after-upgrading-to-win10/</guid>
      <description>虽然在 Docker Hub 看到有标注 OFFICIAL REPOSITORY 的 Dockerfile，但是我还是想自己写一个，因为他们的 Dockerfile 里有一个叫 docker-entrypoint.sh 的文件包含以下内容：
 if [ ! -e &amp;quot;$GHOST_CONTENT/config.js&amp;quot; ]; then sed -r &#39; s/127\.0\.0\.1/0.0.0.0/g; s!path.join\(__dirname, (.)/content!path.join(process.env.GHOST_CONTENT, \1!g; &#39; &amp;quot;$GHOST_SOURCE/config.example.js&amp;quot; &amp;gt; &amp;quot;$GHOST_CONTENT/config.js&amp;quot; fi  这里会把所有 config.js 里的 127.0.0.1 替换为 0.0.0.0 以允许外网访问，却并没有提供数据库的自定义设置。我不想用 SQLite，所以希望能自定义一下 config.js，干脆自己动手。
NodeJS 首先写一个 NodeJS 环境的 Dockerfile，这样下次要用到 NodeJS 我可以直接引用它：
FROM ubuntu:latest MAINTAINER Evlos &amp;lt;4tyle8@gmail.com&amp;gt; ADD sources.list /etc/apt/sources.list RUN apt-get update &amp;amp;&amp;amp; \ apt-get -y upgrade &amp;amp;&amp;amp; \ DEBIAN_FRONTEND=noninteractive apt-get -y install curl &amp;amp;&amp;amp; \ curl --silent --location https://deb.</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>/posts/hello-world/</link>
      <pubDate>Sat, 29 Aug 2015 10:39:20 +0800</pubDate>
      
      <guid>/posts/hello-world/</guid>
      <description>以下内容生成自 Lorem Ipsum，用以抒发我复杂的思想感情：
 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse nulla ante, iaculis et dignissim at, condimentum vitae augue. Donec quis ante vitae orci aliquet aliquam. Nunc ut arcu neque. Fusce non scelerisque augue, at maximus erat. Maecenas quis lorem sed mi ornare molestie. Pellentesque dictum purus cursus dui ornare, nec convallis elit iaculis. Morbi in consectetur orci. Quisque augue massa, convallis vitae ullamcorper non, laoreet at risus.</description>
    </item>
    
  </channel>
</rss>